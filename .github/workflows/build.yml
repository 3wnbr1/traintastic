name: Build

on: [push]

jobs:
  build-client:
    name: client ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "windows_x64_msvc"
          os: windows-latest

        - name: "ubuntu_18.04"
          os: ubuntu-18.04

        - name: "ubuntu_20.04"
          os: ubuntu-20.04

    steps:
    # All:
    - name: Checkout
      uses: actions/checkout@v2

    # Windows only:
    - name: Cache Qt
      if: startswith(matrix.config.os, 'windows')
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-QtCache

    # Windows only:
    - name: Install Qt
      if: startswith(matrix.config.os, 'windows')
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    # Ubuntu only:
    - name: apt update
      if: startswith(matrix.config.os, 'ubuntu')
      run: sudo apt update

    # Ubuntu only:
    - name: Install packages
      if: startswith(matrix.config.os, 'ubuntu')
      run: sudo apt install qt5-default

    - name: Create build directory
      shell: bash
      run: mkdir -p ${{runner.workspace}}/build

    # Ubuntu only:
    - name: Build
      if: startswith(matrix.config.os, 'ubuntu')
      working-directory: ${{runner.workspace}}/build
      run: |
        qmake $GITHUB_WORKSPACE/client/traintastic-client.pro CONFIG+="release" DESTDIR=${{runner.workspace}}/build
        make

    # Windows only:
    - name: Build
      if: startswith(matrix.config.os, 'windows')
      shell: cmd
      #working-directory: ${{runner.workspace}}/build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        qmake --version
        qmake %GITHUB_WORKSPACE%/client/traintastic-client.pro CONFIG+="release" DESTDIR=${{runner.workspace}}/build
        nmake
        windeployqt --release --no-translations -no-system-d3d-compiler --no-opengl-sw ${{runner.workspace}}/build/traintastic-client.exe

    # Windows only:
    - name: Upload artifact
      if: startswith(matrix.config.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: traintastic-client
        path: ${{runner.workspace}}/build

  build-server:
    name: server ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "windows_x64_clang"
          os: windows-latest
          generator: "Visual Studio 16 2019"
          arch: "-A x64"
          toolset: "-T ClangCL"
          defines: "-DENABLE_LUA_SCRIPTING=OFF"

        - name: "ubuntu_18.04"
          os: ubuntu-18.04
          generator: "Unix Makefiles"
          arch: ""
          toolset: ""
          defines: "-DDEBIAN_PACKAGE_VERSION_EXTRA=~bionic~$CI_REF_NAME_SLUG~${{github.run_number}}~$CI_SHA_SHORT"

        - name: "ubuntu_20.04"
          os: ubuntu-20.04
          generator: "Unix Makefiles"
          arch: ""
          toolset: ""
          defines: "-DDEBIAN_PACKAGE_VERSION_EXTRA=~focal~$CI_REF_NAME_SLUG~${{github.run_number}}~$CI_SHA_SHORT"

    steps:
    - uses: FranzDiebold/github-env-vars-action@v2

    # All:
    - name: Checkout
      uses: actions/checkout@v2

    # Ubuntu only:
    - name: Install packages
      if: startswith(matrix.config.os, 'ubuntu')
      run: sudo apt install liblua5.3-dev

    # All:
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/server/build

    # All:
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/server/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/server -G "${{matrix.config.generator}}" ${{matrix.config.arch}} ${{matrix.config.toolset}} -DCMAKE_BUILD_TYPE=Release -DUSB_XPRESSNET=OFF ${{matrix.config.defines}}

    # All:
    - name: Build
      working-directory: ${{runner.workspace}}/server/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Release

    # Ubuntu only:
    - name: Build debian package
      if: startswith(matrix.config.os, 'ubuntu')
      working-directory: ${{runner.workspace}}/server/build
      run: cpack

    # Windows only:
    - name: Upload artifact
      if: startswith(matrix.config.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: traintastic-server
        path: ${{runner.workspace}}/server/build/Release

    # Ubuntu only:
    - name: Upload artifact
      if: startswith(matrix.config.os, 'ubuntu')
      uses: actions/upload-artifact@v2
      with:
        name: traintastic-server-deb
        path: ${{runner.workspace}}/server/build/*.deb

  package-innosetup:
    name: package innosetup
    runs-on: windows-latest
    needs: [build-client, build-server]

    steps:
    - uses: FranzDiebold/github-env-vars-action@v2

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download artifacts 1/2
      uses: actions/download-artifact@v2
      with:
        name: traintastic-client
        path: ${{github.workspace}}/build-client

    - name: Download artifacts 2/2
      uses: actions/download-artifact@v2
      with:
        name: traintastic-server
        path: ${{github.workspace}}/build-server/Release

    - name: Build installer
      shell: cmd
      run: |
        "C:/Program Files (x86)/Inno Setup 6/ISCC.exe" %GITHUB_WORKSPACE%/package/innosetup/traintastic.iss /Ftraintastic-setup-%CI_REF_NAME_SLUG%-%CI_SHA_SHORT%

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: package-innosetup
        path: ${{github.workspace}}/package/innosetup/output

  deploy:
    name: Deploy to website
    runs-on: ubuntu-20.04
    needs: [package-innosetup, build-server]

    steps:
    - uses: FranzDiebold/github-env-vars-action@v2

    - name: Download artifacts 1/2
      uses: actions/download-artifact@v2
      with:
        name: package-innosetup
        path: dist

    - name: Download artifacts 2/2
      uses: actions/download-artifact@v2
      with:
        name: traintastic-server-deb
        path: dist

    - uses: easingthemes/ssh-deploy@v2.1.5
      env:
          SSH_PRIVATE_KEY: ${{secrets.SERVER_SSH_KEY}}
          ARGS: "-rltgoDzvO"
          SOURCE: "dist/*"
          REMOTE_HOST: ${{secrets.REMOTE_HOST}}
          REMOTE_PORT: ${{secrets.REMOTE_PORT}}
          REMOTE_USER: ${{secrets.REMOTE_USER}}
          TARGET: ${{secrets.REMOTE_TARGET}}/traintastic/${{env.CI_REF_NAME_SLUG}}/${{github.run_number}}/
